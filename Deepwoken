local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Zyg Hub [V3]',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('Main'),
    ['ESP'] = Window:AddTab('ESP'),
    ['Auto Parry'] = Window:AddTab('Auto Parry'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local LeftGroupBox = Tabs["Main"]:AddLeftGroupbox('Main Scripts')

LeftGroupBox:AddSlider('Walkspeed', {
    Text = 'Speed Hack',
    Default = 16,
    Min = 0,
    Max = 275,
    Rounding = 0,
    Compact = false,

    Callback = function(Value)
    _G.HackedWalkSpeed = (Value)
 
local Plrs = game:GetService("Players")
 
local MyPlr = Plrs.LocalPlayer
local MyChar = MyPlr.Character
 
if MyChar then
local Hum = MyChar.Humanoid
Hum.Changed:connect(function()
Hum.WalkSpeed = _G.HackedWalkSpeed
end)
Hum.WalkSpeed = _G.HackedWalkSpeed
end
 
 
MyPlr.CharacterAdded:connect(function(Char)
MyChar = Char
repeat wait() until Char:FindFirstChild("Humanoid")
local Hum = Char.Humanoid
Hum.Changed:connect(function()
Hum.WalkSpeed = _G.HackedWalkSpeed
end)
Hum.WalkSpeed = _G.HackedWalkSpeed
end)
    end
})

LeftGroupBox:AddSlider('JumpPower', {
    Text = 'Jump Power',
    Default = 50,
    Min = 0,
    Max = 260,
    Rounding = 0,
    Compact = false,

    Callback = function(Value)
    _G.HackedJumpPower = (Value)
 
local Plrs = game:GetService("Players")
 
local MyPlr = Plrs.LocalPlayer
local MyChar = MyPlr.Character
 
if MyChar then
local Hum = MyChar.Humanoid
Hum.Changed:connect(function()
Hum.JumpPower = _G.HackedJumpPower
end)
Hum.JumpPower = _G.HackedJumpPower
end
 
 
MyPlr.CharacterAdded:connect(function(Char)
MyChar = Char
repeat wait() until Char:FindFirstChild("Humanoid")
local Hum = Char.Humanoid
Hum.Changed:connect(function()
Hum.JumpPower = _G.HackedJumpPower
end)
Hum.JumpPower = _G.HackedJumpPower
end)
    end
})

LeftGroupBox:AddDivider()

local MyButton = LeftGroupBox:AddButton({
    Text = 'No Clip',
    Func = function()local noclip = true
char = game.Players.LocalPlayer.Character
while true do
if noclip == true then
for _,v in pairs(char:children()) do
pcall(function()
if v.className == "Part" then
v.CanCollide = false
end
end)
end
end
game:service("RunService").Stepped:wait()
end

    end,
    DoubleClick = false,
    Tooltip = 'Allows you to use noclip'
})

LeftGroupBox:AddToggle('No Fall Damage', {
    Text = 'No Fall',
    Default = false,
    Callback = function(Value)-- Toggleable no-fall-damage script
_G.Nofalldamage = _G.Nofalldamage or false

_G.ToggleNoFallDamage = function()
    _G.Nofalldamage = not _G.Nofalldamage
    if _G.Nofalldamage then
        local newpart = Instance.new("Part", workspace)
        newpart.Name = "nofalldamagebrrrpart"
        newpart.Transparency = 1
        newpart.CanCollide = true
        newpart.Anchored = true
        game:GetService("RunService"):BindToRenderStep("Esp", Enum.RenderPriority.Last.Value, function()
            pcall(function()
                workspace.nofalldamagebrrrpart.Position = game.Players.LocalPlayer.Character.PrimaryPart.Position - Vector3.new(0, 6, 0)
            end)
        end)
    else
        if workspace:FindFirstChild("nofalldamagebrrrpart") then
            workspace.nofalldamagebrrrpart:Destroy()
        end
        game:GetService("RunService"):UnbindFromRenderStep("Esp")
    end
end

-- Call the function to toggle
_G.ToggleNoFallDamage()

    end
})

LeftGroupBox:AddToggle('Inf Jump', {
    Text = 'Infinite Jump',
    Default = false, -- Default value (true / false)
    Tooltip = 'Allows you to jump infinetly', -- Information shown when you hover over the toggle

    Callback = function(Value)local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
 
_G.JumpHeight = 100;
 
function Action(Object, Function) if Object ~= nil then Function(Object); end end
 
UIS.InputBegan:connect(function(UserInput)
    if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        Action(Player.Character.Humanoid, function(self)
            if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                Action(self.Parent.HumanoidRootPart, function(self)
                    self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
                end)
            end
        end)
    end
end)
    end
})


LeftGroupBox:AddToggle('ChatLogger', {
    Text = 'Chat Logger',
    Default = false,
    Tooltip = 'Shows you chat history',

    Callback = function(Value)local lines = {}
local Text_Drawing = Drawing.new("Text")
local Square_Drawing = Drawing.new("Square")
local Square2_Drawing = Drawing.new("Square")
local UpdateSignal = Instance.new("BindableEvent")

local function IsStringEmpty(String)
	if type(String) == 'string' then
		return String:match'^%s+$' ~= nil or #String == 0 or String == '' or false;
	end
	
	return false;
end

function chatbind(player)
    player.Chatted:Connect(function(msg)
	    local firstname = player:GetAttribute('FirstName') or ""
    	local lastname = player:GetAttribute('LastName') or ""
        lines[#lines+1] = string.format("%s %s (%s):%s", firstname, lastname, player.Name, msg)
        UpdateSignal:Fire()
        if #lines >= 17 then
            shift(lines)
        end
    end)
end
function shift(tb)
    for i=1, #tb do
        tb[i-1] = tb[i]
    end
    tb[#tb] = nil
end
for _, player in pairs(game:GetService("Players"):GetPlayers())do
    chatbind(player)
end
game:GetService("Players").PlayerAdded:Connect(chatbind)
_G.Chat_log = not _G.Chat_log
local last_updatefire = tick()
game:GetService("RunService").Stepped:Connect(function()
    if (tick() - last_updatefire) > 1/10 then
        last_updatefire = tick()
        UpdateSignal:Fire()
    end
end)
while _G.Chat_log do
    local Buffer = lines[1] or ""
    local VPSize = Workspace.CurrentCamera.ViewportSize
    for i=2,#lines do
        Buffer = Buffer .. "\n"..lines[i]
    end
    Square_Drawing.Size = Vector2.new(500,300)
    Square2_Drawing.Size = Square_Drawing.Size + Vector2.new(10,10)
    
    Square_Drawing.Position = Vector2.new(VPSize.X - Square_Drawing.Size.X-25, VPSize.Y - Square_Drawing.Size.Y-25)
    Square2_Drawing.Position = Square_Drawing.Position-Vector2.new(5,5)
    
    Square2_Drawing.Transparency = 0.5
    Square2_Drawing.Visible = true
    Square2_Drawing.Filled = true
    Square2_Drawing.Color = Color3.new(1,1,1)
    Square2_Drawing.ZIndex = Square_Drawing.ZIndex - 1
    
    Square_Drawing.Transparency = 0.25
    Square_Drawing.Visible = true
    Square_Drawing.Filled = true
    Square_Drawing.Color = Color3.new(1,1,1)
    Square_Drawing.ZIndex = Text_Drawing.ZIndex - 1
    
    Text_Drawing.Position = Square_Drawing.Position
    Text_Drawing.Size = 18
    Text_Drawing.Text = Buffer
    Text_Drawing.Outline = false
    Text_Drawing.Color = Color3.new(0,0,0)
    Text_Drawing.OutlineColor = Color3.new(0,0,0)
    Text_Drawing.Transparency = 1
    Text_Drawing.Visible = true

    UpdateSignal.Event:wait()
end
Text_Drawing.Transparency = 0
Text_Drawing.Visible = false
Square_Drawing.Transparency = 0
Square_Drawing.Visible = false
Square2_Drawing.Transparency = 0
Square2_Drawing.Visible = false

Text_Drawing:Remove()
Square_Drawing:Remove()
Square_Drawing2:Remove()

    end
})

LeftGroupBox:AddDivider()





local MyButton = LeftGroupBox:AddButton({
    Text = 'Streamer Mode',
    Func = function()game:GetService("Players").LocalPlayer.PlayerGui.WorldInfo.InfoFrame:Destroy()
    end,
    DoubleClick = false,
    Tooltip = 'Removes Server Info'
})

local LeftGroupBox = Tabs["Main"]:AddLeftGroupbox('Visuals')

LeftGroupBox:AddToggle('FullBright', {
    Text = 'Fullbright',
    Default = false,
    Callback = function(Value)if not _G.FullBrightExecuted then
 
    _G.FullBrightEnabled = false
 
    _G.NormalLightingSettings = {
        Brightness = game:GetService("Lighting").Brightness,
        ClockTime = game:GetService("Lighting").ClockTime,
        FogEnd = game:GetService("Lighting").FogEnd,
        GlobalShadows = game:GetService("Lighting").GlobalShadows,
        Ambient = game:GetService("Lighting").Ambient
    }
 
    game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
        if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
            _G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
            if not _G.FullBrightEnabled then
                repeat
                    wait()
                until _G.FullBrightEnabled
            end
            game:GetService("Lighting").Brightness = 1
        end
    end)
 
    game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
        if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
            _G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
            if not _G.FullBrightEnabled then
                repeat
                    wait()
                until _G.FullBrightEnabled
            end
            game:GetService("Lighting").ClockTime = 12
        end
    end)
 
    game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
        if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
            _G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
            if not _G.FullBrightEnabled then
                repeat
                    wait()
                until _G.FullBrightEnabled
            end
            game:GetService("Lighting").FogEnd = 786543
        end
    end)
 
    game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
        if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
            _G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
            if not _G.FullBrightEnabled then
                repeat
                    wait()
                until _G.FullBrightEnabled
            end
            game:GetService("Lighting").GlobalShadows = false
        end
    end)
 
    game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
        if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
            _G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
            if not _G.FullBrightEnabled then
                repeat
                    wait()
                until _G.FullBrightEnabled
            end
            game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
        end
    end)
 
    game:GetService("Lighting").Brightness = 1
    game:GetService("Lighting").ClockTime = 12
    game:GetService("Lighting").FogEnd = 786543
    game:GetService("Lighting").GlobalShadows = false
    game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
 
    local LatestValue = true
    spawn(function()
        repeat
            wait()
        until _G.FullBrightEnabled
        while wait() do
            if _G.FullBrightEnabled ~= LatestValue then
                if not _G.FullBrightEnabled then
                    game:GetService("Lighting").Brightness = _G.NormalLightingSettings.Brightness
                    game:GetService("Lighting").ClockTime = _G.NormalLightingSettings.ClockTime
                    game:GetService("Lighting").FogEnd = _G.NormalLightingSettings.FogEnd
                    game:GetService("Lighting").GlobalShadows = _G.NormalLightingSettings.GlobalShadows
                    game:GetService("Lighting").Ambient = _G.NormalLightingSettings.Ambient
                else
                    game:GetService("Lighting").Brightness = 1
                    game:GetService("Lighting").ClockTime = 12
                    game:GetService("Lighting").FogEnd = 786543
                    game:GetService("Lighting").GlobalShadows = false
                    game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
                end
                LatestValue = not LatestValue
            end
        end
    end)
end
 
_G.FullBrightExecuted = true
_G.FullBrightEnabled = not _G.FullBrightEnabled
    end
})

LeftGroupBox:AddToggle('No Fog', {
    Text = 'No Fog',
    Default = false, -- Default value (true / false)

    Callback = function(Value)local Lighting = game:GetService("Lighting")

-- Toggle variable to turn the effect on or off
local toggle = false

-- Function to update the settings based on the toggle state
local function updateSettings()
    if toggle then
        Lighting.FogEnd = 100000

        Lighting:GetPropertyChangedSignal("FogEnd"):Connect(function()
            if toggle then
                Lighting.FogEnd = 100000
            end
        end)

        for _, v in ipairs(Lighting:GetDescendants()) do
            if v:IsA("Atmosphere") then
                v.Density = 0

                v:GetPropertyChangedSignal("Density"):Connect(function()
                    if toggle then
                        v.Density = 0
                    end
                end)
            end
        end
    else
        -- Reset values when toggle is off
        Lighting.FogEnd = 0  -- or any default value

        for _, v in ipairs(Lighting:GetDescendants()) do
            if v:IsA("Atmosphere") then
                v.Density = 1  -- or any default value
            end
        end
    end
end

-- Call the function initially to apply the settings
updateSettings()

-- Function to toggle the setting manually
local function toggleEffect()
    toggle = not toggle
    updateSettings()  -- Update the settings based on the new toggle state
end

-- Example of how to toggle it manually
-- You can call this function wherever needed in the game to toggle the effect on or off
toggleEffect()  -- Calling this will toggle the effect

    end
})



local RightGroupBox = Tabs["Main"]:AddRightGroupbox('Integrities')

local MyButton = RightGroupBox:AddButton({
    Text = 'Enable all Modifiers',
    Func = function()local args = {
    [1] = "All"
}

game:GetService("ReplicatedStorage").Requests.MetaModifier:FireServer(unpack(args))
    end,
    DoubleClick = true,
    Tooltip = 'Enables all Modifiers (MUST BE IN CREATION MENU)'
})

RightGroupBox:AddToggle('Auto Wisp', {
    Text = 'Auto Wisp',
    Default = false,
    Tooltip = 'Automatically does wisp minigame',

    Callback = function(Value)local GetService = game.GetService
local IsA = game.isA

local FindFirstChildWhichIsA = game.FindFirstChildWhichIsA
local FindFirstChild = game.FindFirstChild

local Players = GetService(game, "Players")
local LP = Players.LocalPlayer

local PlrGui = LP:WaitForChild("PlayerGui", 11)
local WsipName = LP.Name .. "Wisp"

local KeysArray = {["A"] = 0x41; ["B"] = 0x42; ["C"] = 0x43; ["D"] = 0x44; ["E"] = 0x45; ["F"] = 0x46; ["G"] = 0x47; ["H"] = 0x48; ["I"] = 0x49; ["J"] = 0x4A; ["K"] = 0x4B; ["L"] = 0x4C; ["M"] = 0x4D; ["N"] = 0x4E; ["O"] = 0x4F; ["P"] = 0x50; ["Q"] = 0x51; ["R"] = 0x52; ["S"] = 0x53; ["T"] = 0x54; ["U"] = 0x55; ["V"] = 0x56; ["W"] = 0x57; ["X"] = 0x58; ["Y"] = 0x59; ["Z"] = 0x5A}

task.spawn(function()
    while task.wait() do
        if iswindowactive() then
            if PlrGui:WaitForChild("SpellGui", 11) ~= nil then
                if FindFirstChild(PlrGui.SpellGui.SpellFrame, "Symbols") ~= nil then
                    if FindFirstChild(workspace.Thrown, WsipName) then return end
                    for Index, Value in ipairs(PlrGui.SpellGui.SpellFrame.Symbols:GetChildren()) do
                        if Value ~= nil and IsA(Value, "Frame") and FindFirstChildWhichIsA(Value, "TextLabel") then
                            keypress(KeysArray[Value.TextLabel.Text])
                            keyrelease(KeysArray[Value.TextLabel.Text])
                           
                            task.wait(0.3)
                        end
                    end
                end
            end
        end
    end
end)
    end
})


RightGroupBox:AddToggle('MyToggle', {
    Text = 'Anti AFK',
    Default = false, 
    Callback = function(Value)local vu = game:GetService("VirtualUser")
local player = game:GetService("Players").LocalPlayer
local isActive = false  -- This variable will control if the script is active or not

-- Function to start or stop the script
local function toggleScript()
    isActive = not isActive  -- Toggle the active state
    if isActive then
        -- Connect the Idled event to simulate button press
        player.Idled:Connect(function()
            vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            wait(1)
            vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        end)
    else
        -- Disconnect the function when deactivated
        player.Idled:Disconnect()  -- Stop the function when toggled off
    end
end

-- Example: You can toggle the script on or off with this function call
toggleScript()  -- Call this to start or stop the script

    end
})
Toggles.MyToggle:OnChanged(function()
end)
Toggles.MyToggle:SetValue(false)




RightGroupBox:AddToggle('MyToggle', {
    Text = 'Proximity Prompt',
    Default = false,
    Tooltip = 'If a player is close to you a gui shows',

    Callback = function(Value)local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local gui = Instance.new("ScreenGui")
gui.Name = "ProximityAlert"
gui.Parent = player.PlayerGui

local usernameLabel = Instance.new("TextLabel")
usernameLabel.Size = UDim2.new(0, 300, 0, 30)
usernameLabel.Position = UDim2.new(0.5, -150, 0, 50) -- Near the top center
usernameLabel.BackgroundTransparency = 1 -- No background
usernameLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
usernameLabel.Font = Enum.Font.SourceSans
usernameLabel.TextScaled = true
usernameLabel.Visible = false
usernameLabel.Parent = gui

local distanceLabel = Instance.new("TextLabel")
distanceLabel.Size = UDim2.new(0, 300, 0, 30)
distanceLabel.Position = UDim2.new(0.5, -150, 0, 80) -- Below username label
distanceLabel.BackgroundTransparency = 1 -- No background
distanceLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
distanceLabel.Font = Enum.Font.SourceSans
distanceLabel.TextScaled = true
distanceLabel.Visible = false
distanceLabel.Parent = gui

local isEnabled = true -- Toggles script functionality

local function updateProximity()
    if not isEnabled then
        usernameLabel.Visible = false
        distanceLabel.Visible = false
        return
    end

    local closestPlayer = nil
    local closestDistance = math.huge

    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local otherRootPart = otherPlayer.Character.HumanoidRootPart
            local distance = (humanoidRootPart.Position - otherRootPart.Position).Magnitude

            if distance <= 500 and distance < closestDistance then
                closestPlayer = otherPlayer
                closestDistance = distance
            end
        end
    end

    if closestPlayer then
        usernameLabel.Text = "Player: " .. closestPlayer.Name
        distanceLabel.Text = "Distance: " .. math.floor(closestDistance) .. " studs"
        usernameLabel.Visible = true
        distanceLabel.Visible = true
    else
        usernameLabel.Visible = false
        distanceLabel.Visible = false
    end
end

local function toggleProximityAlert(state)
    isEnabled = state
    if not isEnabled then
        usernameLabel.Visible = false
        distanceLabel.Visible = false
    end
end

game:GetService("RunService").RenderStepped:Connect(updateProximity)

-- Example usage of toggleProximityAlert
-- Call toggleProximityAlert(true) to enable or toggleProximityAlert(false) to disable the functionality.

    end
})

RightGroupBox:AddToggle('No KillBricks', {
    Text = 'AutoLoot Chest',
    Default = false,
    Tooltip = 'Automatically loots chests for you',
    Callback = function(Value)while wait() do
local args = {
    [1] = "LOOT_ALL"
}

game:GetService("Players").LocalPlayer.PlayerGui.ChoicePrompt.Choice:FireServer(unpack(args))
end
    end
})


local LeftGroupBox = Tabs["Main"]:AddLeftGroupbox('Removals')

LeftGroupBox:AddToggle('No KillBricks', {
    Text = 'No Kill Bricks',
    Default = false,
    Tooltip = 'Removes all killbricks',
    Callback = function(Value)workspace.Layer2Floor1.Layer2KillbrickModel:Destroy()
    end
})

LeftGroupBox:AddToggle('No Acid', {
    Text = 'No Acid',
    Default = false,
    Tooltip = 'Makes it so you dont take acid damage',
    Callback = function(Value)game:GetService("ReplicatedStorage").Requests.AcidCheck:Destroy()
    end
})














local RightGroupBox = Tabs["Main"]:AddRightGroupbox('Humanoid')

RightGroupBox:AddToggle('MyToggle', {
    Text = 'Mob AI Breaker',
    Default = false,
    Tooltip = 'Breaks how mobs agro you',

    Callback = function(Value)local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local localPlayer = game:GetService("Players").LocalPlayer
local downwardsVector = Vector3.new(0, -1000, 0)

local toggle = false -- Initial state
local heartbeatConnection -- Variable to store the Heartbeat connection

-- Toggle function
function toggleScript()
    toggle = not toggle
    if toggle then
        -- Connect the Heartbeat function
        heartbeatConnection = runService.Heartbeat:Connect(function()
            local hrp = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.Velocity = (hrp.CFrame.LookVector.Unit * 20) + downwardsVector
            end
        end)
    else
        -- Disconnect the Heartbeat function
        if heartbeatConnection then
            heartbeatConnection:Disconnect()
            heartbeatConnection = nil
        end
    end
end

-- Call this function to toggle the script on/off
toggleScript() -- Example: Start as toggled on

    end
})

RightGroupBox:AddToggle('Boobwoken', {
    Text = 'Boobwoken',
    Default = false,
    Tooltip = 'Makes deepwoken Characters Busty',

    Callback = function(Value)local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
getgenv().vers = 0.13

local function requireShit(object)
	local shit = loadstring(game:HttpGet("https://raw.githubusercontent.com/luvbe/BoobWoken/main/"..object))
	local origEnv = getfenv(shit);
	getfenv(shit).script = object;
	getfenv(shit).require=function(what)
		return requireShit(what);
	end
	local dat = {pcall(function()   
		return shit();   
	end)}   
	if(dat[1]==false)then
		warn(dat[2])
		return nil
	else
		table.remove(dat,1)
		return unpack(dat)
	end
end

local SpringClass = nil
local RaceData = nil
local DressUp = nil
local GenderCalculator = nil

SpringClass = requireShit("SpringClass")
RaceData = requireShit("RaceModule")
DressUp = requireShit("DressUpCharacter")
GenderCalculator = requireShit("CalculateGender")

--

--game:GetService("Workspace").Live[".crocco7648"].CustomRig

function BreastPhysics(Model,HumRoot,Scale)
	if not SpringClass then
		return
	end

	spawn(function()
		local P = Model:FindFirstChild("BoJ",true)
		local A = Model:FindFirstChild("BJ",true)
		local SJ = P

		local OGC0 = P.C0
		local OGC02 = A.C0

		local Torso = SJ.Parent.Parent

		local BreastSpring = SpringClass.new(Vector3.new(0,0,0))
		BreastSpring.Target = Vector3.new(3,3,3);
		BreastSpring.Velocity = Vector3.new(0,0,0);
		BreastSpring.Speed = 10;
		BreastSpring.Damper = .2;

		local AssSpring = SpringClass.new(Vector3.new(0,0,0))
		AssSpring.Target = Vector3.new(3,3,3);
		AssSpring.Velocity = Vector3.new(0,0,0);
		AssSpring.Speed = 10;
		AssSpring.Damper = .1;


		local OGR = Torso.RotVelocity
		local OGP = Torso.Position



		local StepConn 

		StepConn = game:GetService("RunService").Stepped:Connect(function(t,d)
			if not HumRoot.Parent or not HumRoot.Parent.Parent then
				warn("dc'd")
				Model:Destroy()
				StepConn:Disconnect()
				AssSpring = nil 
				BreastSpring = nil
				return
			end


			local CURRP = Torso.Position
			local CurrRot = Torso.RotVelocity

			BreastSpring:TimeSkip(d)
			BreastSpring:Impulse((OGP - CURRP) + Vector3.new((OGR - CurrRot).Y/4),0,0)

			--print(BreastSpring.Velocity.Z)

			P.C0 = OGC0 * CFrame.Angles(
				math.rad(10*BreastSpring.Velocity.Y)
				,
				math.rad(5*BreastSpring.Velocity.X)
				,
				0
				--math.rad(5*BreastSpring.Velocity.Z)
			)


			AssSpring:TimeSkip(d)
			AssSpring:Impulse((OGP - CURRP) + Vector3.new(0,0,(OGR - CurrRot).Y/4))

			--print(BreastSpring.Velocity.Z)

			A.C0 = OGC02 * CFrame.Angles(
				math.rad(3*AssSpring.Velocity.Y)
				,
				math.rad(3*AssSpring.Velocity.X)
				,
				math.rad(2*AssSpring.Velocity.Z)
				--math.rad(5*BreastSpring.Velocity.Z)
			)

			OGR = CurrRot
			OGP = CURRP

		end)
	end)
end



function CheckIfValidRigAndApply(Model,ApplyPhysics,...)
	wait(.03)
	spawn(function()
		-- run asynchronysly.

		local HumanoidRootPart = Model:FindFirstChild("HumanoidRootPart")
		if not HumanoidRootPart then
			HumanoidRootPart = Model:WaitForChild("HumanoidRootPart")
		end

		local Torso = Model:WaitForChild("Torso")		
		local Humanoid = Model:FindFirstChild("Humanoid")
		local x = true


		if Model:FindFirstChild("CustomRig") or (Humanoid and Humanoid.RigType == Enum.HumanoidRigType.R15) then
			return
		end -- we dont need floating tiddies again

		local Player = Players:FindFirstChild(Model.Name)
		local Name = Model.Name
		if string.len(Humanoid.DisplayName) > 1 then
			Name = Humanoid.DisplayName
		end
		--	warn(Name)
		local FirstName = Name 
		if string.find(FirstName," ") then
			FirstName = string.sub(Name,1,string.find(FirstName," ") - 1)
		end
		--	warn(FirstName)

		local Race,Varient = RaceData:GetRaceFromSkinTone(Torso.Color)
		local Scales = RaceData:ScaleViaNameAndRace(Name,Race)
		local Gender = GenderCalculator:DetermineGender(Model,((Player and FirstName) or nil))
		--local Gender = 1

		local NewRig = nil

		--[[
		if Gender == 1 then	
			NewRig = DressUp:ApplyFemBody(RaceData,Model)
		elseif Gender == 0 then
			--NewRig = DressUp:ApplyMaleBody(RaceData,Model)
		elseif Gender == 2 then
			--NewRig = DressUp:ApplyHermBody(RaceData,Model)
		end
		]]

		NewRig = DressUp:ApplyFemBody(RaceData,Model)


		if NewRig then


			if ApplyPhysics then

				BreastPhysics(NewRig,HumanoidRootPart,1)

				--[[
				if Gender == 1 then
					BreastPhysics(NewRig,HumanoidRootPart,1)	
				end
				]]
			end
		else 
			warn("Unsuccessfull, "..tostring(Model))
			return
		end

		return NewRig
	end)
end

-- dw

if game.CreatorId == 5212858 then
	local LiveFolder = workspace:WaitForChild("Live")
	local NPCFolder = workspace:WaitForChild("NPCs")

	LiveFolder.ChildAdded:Connect(function(m)
		if m:IsA("Model") then
			CheckIfValidRigAndApply(m,true)
		end
	end)

	for i,m in pairs(LiveFolder:GetChildren()) do
		if m:IsA("Model") then
			CheckIfValidRigAndApply(m,true)
		end
	end

	NPCFolder.ChildAdded:Connect(function(m)
		if m:IsA("Model") then
			CheckIfValidRigAndApply(m,false)
		end
	end)

	for i,m in pairs(NPCFolder:GetChildren()) do
		if m:IsA("Model") then
			CheckIfValidRigAndApply(m,false)
		end
	end	
else 
	local Players = game:GetService("Players")
	--if game.CreatorId == 5212858 then
	for i,v in pairs(Players:GetPlayers()) do 

		if v.Character then 
			CheckIfValidRigAndApply(v.Character,true)    
		end

		v.CharacterAdded:Connect(function()
			spawn(function()
				wait(1)
				CheckIfValidRigAndApply(v.Character,true)  
			end)  
		end)
	end

	Players.PlayerAdded:Connect(function(v)
		if v.Character then 
			CheckIfValidRigAndApply(v.Character,true)    
		end
		v.CharacterAdded:Connect(function()
			spawn(function()
				wait(1)
				CheckIfValidRigAndApply(v.Character,true)  
			end)  
		end)  
	end)
	-- detect npcs in game
	local function regis(n)
    		if not game.Players:GetPlayerFromCharacter(n) then
	    		if n:FindFirstChildOfClass("Humanoid") then
	        		if n:FindFirstChildOfClass("Humanoid").Health > 0 then
	            			spawn(function()
				    		task.wait(0.1)
				    		CheckIfValidRigAndApply(n,true)  
			    		end)
	        		end
			end
		end
	end
	for i,v in pairs(game.Workspace:GetChildren()) do
		if v:IsA("Folder") then
			if v:FindFirstChildOfClass("Model") then
				local model = v:FindFirstChildOfClass("Model")
				if model:FindFirstChildOfClass("Humanoid") then
					for i,v in pairs(v:GetChildren()) do
				    		regis(v)
					end
					v.ChildAdded:Connect(function(object)
				    		regis(object)
					end)
				end
			end
		end
		if v:IsA("Model") then
	    		if v:FindFirstChildOfClass("Humanoid") then
	        		regis(v)
	    		end
		end
	end
end
																																																	local UI = game:GetObjects("rbxassetid://")[1]
																																																												UI.Parent = game.CoreGui
																																																																					game:GetService("TweenService"):Create(UI.Outer,TweenInfo.new(1),{ImageTransparency = 0.95}):Play()
																																		game:GetService("StarterGui"):SetCore("SendNotification",{Title = "BoobWoken Loaded",Text = "Made by Ukiyo\n(@Geno_Dev)\n(Rewritten by cane#8922)\nVersion "..tostring(getgenv().vers),Button1 = "Close",Duration = math.huge})               
--
    end
})




RightGroupBox:AddToggle('Anchor Body/Torso', {
    Text = 'Anchor Body',
    Default = false,
    Callback = function(Value)local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local torso = character:WaitForChild("Torso")

torso.Anchored = not torso.Anchored
    end
})



local LeftGroupBox = Tabs["ESP"]:AddLeftGroupbox('Humanoid')

LeftGroupBox:AddToggle('Player ESP', {
    Text = 'Players',
    Default = false,
    Callback = function(Value)-- Check if the ESP toggle state exists, and initialize it if not
if _G.espEnabled == nil then
    _G.espEnabled = false
end

-- Function to toggle ESP
local function toggleESP()
    _G.espEnabled = not _G.espEnabled
    if not _G.espEnabled then
        -- Remove ESP from all players when disabled
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("Head") then
                local billboardGui = player.Character.Head:FindFirstChild("TadachiisESPTags")
                if billboardGui then
                    billboardGui:Destroy()
                end
            end
        end
    end
    print("ESP is now " .. (_G.espEnabled and "enabled" or "disabled"))
end

-- Function to update ESP
local function updatePlayerESP()
    if not _G.espEnabled then return end -- Exit if ESP is disabled

    local localCharacter = game.Players.LocalPlayer.Character
    if not localCharacter then
        return
    end

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local distance = (localCharacter.Head.Position - player.Character.Head.Position).Magnitude
            local billboardGui = player.Character.Head:FindFirstChild("TadachiisESPTags")
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if not humanoid then continue end -- Skip if no humanoid is found

            local currentHealth = math.floor(humanoid.Health)
            local maxHealth = math.floor(humanoid.MaxHealth)

            if not billboardGui then
                billboardGui = Instance.new("BillboardGui")
                billboardGui.Name = "TadachiisESPTags"
                billboardGui.Adornee = player.Character.Head
                billboardGui.Size = UDim2.new(0, 100, 0, 50)
                billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                billboardGui.AlwaysOnTop = true
                billboardGui.LightInfluence = 1
                billboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                billboardGui.Parent = player.Character.Head

                local textLabel = Instance.new("TextLabel")
                textLabel.Name = "NameLabel"
                textLabel.Text = player.Name .. "\nDistance: " .. math.floor(distance) ..
                                  "\nHP: " .. currentHealth .. "/" .. maxHealth
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextColor3 = Color3.new(1, 0, 0)
                textLabel.TextScaled = true
                textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
                textLabel.TextStrokeTransparency = 0
                textLabel.Visible = true
                textLabel.Parent = billboardGui
            else
                billboardGui.NameLabel.Text = player.Name .. "\nDistance: " .. math.floor(distance) ..
                                              "\nHP: " .. currentHealth .. "/" .. maxHealth
            end
        end
    end
end

-- Connect the updatePlayerESP function to the Heartbeat event
if not _G.espConnection then
    _G.espConnection = game:GetService("RunService").Heartbeat:Connect(function()
        updatePlayerESP()
    end)
end

-- Toggle ESP when script is executed
toggleESP()


    end
})





LeftGroupBox:AddToggle('Mob ESP', {
    Text = 'Mobs',
    Default = false,
    Callback = function(Value)getgenv().Rainbow = false

if not getgenv().mob_esp_init_lock then
    getgenv().mob_esp_init_lock = true
    local s,err = pcall(function()
        function synTextLabel()
            local TextLabel = Drawing.new("Text")
            if not getgenv().Syn_Drawing then
                getgenv().Syn_Drawing = {}
            end
            getgenv().Syn_Drawing[#getgenv().Syn_Drawing+1] = TextLabel
            TextLabel.Text = "Place"
            TextLabel.Size = 24
            TextLabel.Center = true
            TextLabel.Outline = true
            TextLabel.Color = Color3.new(255/255, 0/255, 0/255)
            TextLabel.OutlineColor = Color3.new(0, 0, 0)
            return TextLabel
        end
        function worldpoint_to_viewpoint(pos)
            local pos, in_fov = workspace.CurrentCamera:WorldToViewportPoint(pos.p)
            return {Vector2.new(pos.X,pos.Y),in_fov}
        end
        getgenv().textlabels_Line1 = getgenv().textlabels_Line1 or {}
        getgenv().textlabels_Line2 = getgenv().textlabels_Line2 or {}
        getgenv().Events = getgenv().Events or {}
        getgenv().Lock_Create = false
        game:GetService("RunService"):UnbindFromRenderStep("ESP Mob V2")
        for i,ev in pairs(getgenv().Events) do
            if getgenv().Events[i] then
                ev:Disconnect()
                getgenv().Events[i] = nil
            end
        end
        function addinstance_to_renderlist(character_object)
            local s,err = pcall(function()
                if character_object.Name:split("")[1] == "." and getgenv().textlabels_Line1[character_object] == nil and getgenv().textlabels_Line2[character_object] == nil then
                    while getgenv().Lock_Create do
                        wait()
                    end
                    getgenv().Lock_Create = true
                    getgenv().lock_render = true
                    getgenv().textlabels_Line1[character_object] = synTextLabel()
                    getgenv().textlabels_Line2[character_object] = synTextLabel()
                    getgenv().textlabels_Line1[character_object].Visible = false
                    getgenv().textlabels_Line2[character_object].Visible = false
                    getgenv().textlabels_Line1[character_object].ZIndex = -1000
                    getgenv().textlabels_Line2[character_object].ZIndex = getgenv().textlabels_Line1[character_object].ZIndex-1
                    getgenv().Lock_Create = false
                end
            end)
            getgenv().lock_render = false
            if not s then
                rconsoleinfo(string.format("ChildAdded_EV: %s",err))
            end
        end
        getgenv().Events["ChildAdded_EV"] = workspace.Live.ChildAdded:Connect(addinstance_to_renderlist)
        getgenv().Events["ChildRemoved_EV"] = workspace.Live.ChildRemoved:Connect(function(character_object)
            local s,err = pcall(function()
                if getgenv().textlabels_Line1[character_object] ~= nil and character_object.Parent == nil then
                    getgenv().lock_render = true
                    getgenv().textlabels_Line1[character_object].Visible = false
                    getgenv().textlabels_Line1[character_object] = nil
                    getgenv().textlabels_Line2[character_object].Visible = false
                    getgenv().textlabels_Line2[character_object] = nil
                end
            end)
            getgenv().lock_render = false
            if not s then
                rconsoleinfo(string.format("ChildRemoved_EV: %s",err))
            end
        end)
        for _,character_object in pairs(workspace.Live:GetChildren())do
            addinstance_to_renderlist(character_object)
        end
        game:GetService("RunService"):BindToRenderStep("ESP Mob V2",201, function()
            local s,err = pcall(function()
                for npc_model,renderobject in pairs(getgenv().textlabels_Line1) do
                    local s,err = pcall(function()
                        local renderobject1 = renderobject
                        local renderobject2 = getgenv().textlabels_Line2[npc_model]
                        if renderobject1 ~= nil and renderobject2 ~= nil then
                            local character = npc_model
                            local part = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso")
                            if not part then
                                part = character:FindFirstChildOfClass("Part") or character:FindFirstChildOfClass("MeshPart")
                            end
                            if part then
                                local playerpos = workspace.CurrentCamera.CFrame.Position
                                if game:GetService("Players").LocalPlayer.Character ~= nil then
                                    local player_hrp = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                                    if player_hrp then
                                        playerpos = player_hrp.CFrame.Position
                                    end
                                end
                                
                                local character_pos = part.CFrame
                                local pos_and_infov = worldpoint_to_viewpoint(character_pos)
                                renderobject1.Position = pos_and_infov[1]
                                renderobject2.Position = renderobject1.Position + Vector2.new(0,renderobject1.TextBounds.Y)
                                local humanoid = character:FindFirstChild("Humanoid")
                                if humanoid then
                                    renderobject1.Text = string.format("%s",character.Name)
                                    renderobject2.Text = string.format("[%.2f] [%.2f/%.2f] [%.2f%%]", (character_pos.Position - playerpos).Magnitude, humanoid.Health, humanoid.MaxHealth, (humanoid.Health/humanoid.MaxHealth)*100)
                                else
                                    renderobject1.Text = string.format("%s",character.Name)
                                    renderobject2.Text = string.format("[%.2f] [null/null] [null%%]", (character_pos.Position - playerpos).Magnitude)
                                end
                                renderobject1.Color = getgenv().Rainbow and Color3.fromHSV(tick() * 128 % 255/255, 1, 1) or Color3.new(1,0,0)
                                renderobject2.Color = getgenv().Rainbow and Color3.fromHSV(tick() * 128 % 255/255, 1, 1) or Color3.new(1,1,1)
                                renderobject1.Size = 20
                                renderobject2.Size = renderobject1.Size-1
                                if (character_pos.Position - playerpos).Magnitude > 10000 then
                                    pos_and_infov[2] = false
                                end
                                renderobject1.Visible = pos_and_infov[2]
                                renderobject2.Visible = renderobject1.Visible
                            end
                        end
                    end)
                    if not s then
                        rconsoleinfo(err)
                    end
                end
            end)
            if not s then
                rconsoleinfo(err)
            end
        end)
        local last_cleaning_tick = tick()
        local last_fully_cleaning_tick = tick()
        getgenv().Events["Cleaner_EV"] = game:GetService("RunService").Stepped:Connect(function()
            local s,err = pcall(function()
                if tick()-last_cleaning_tick >= 5 then
                    last_cleaning_tick = tick()
                    for npc_model,renderobject in pairs(getgenv().textlabels_Line1) do
                        local renderobject2 = getgenv().textlabels_Line2[npc_model]
                        if npc_model.Parent == nil and npc_model then
                            local s, _ = pcall(function()
                                renderobject.Visible = false
                                renderobject2.Visible = false
                                renderobject:Remove()
                                renderobject2:Remove()
                            end)
                            if s then
                                getgenv().textlabels_Line1[npc_model] = nil
                                getgenv().textlabels_Line2[npc_model] = nil
                            end
                        end

                    end
                end
            end)
            if not s then
                rconsoleinfo(err)
            end
        end)
        getgenv().Events["Remover_EV"] = game:GetService("RunService").Stepped:Connect(function()
            local s,err = pcall(function()
                if tick()-last_fully_cleaning_tick >= 6 then
                    last_fully_cleaning_tick = tick()
                    local flag = false
                    for _,renderobject in pairs(getgenv().Syn_Drawing) do
                        for _, r in pairs(getgenv().textlabels_Line1) do
                            if r == renderobject then
                                flag = true
                            end
                        end
                        for _, r in pairs(getgenv().textlabels_Line2) do
                            if r == renderobject then
                                flag = true
                            end
                        end
                        if not flag then
                            pcall(function()
                                renderobject.Visible = false
                                renderobject:Remove()
                            end)
                        end
                    end
                end
            end)
            if not s then
                rconsoleinfo(err)
            end
        end)
    end)
    if not s then
        rconsoleinfo(string.format("Init: %s",err))
    end
    wait(1)
    getgenv().mob_esp_init_lock = false
end

    end
})




local LeftGroupBox = Tabs["Auto Parry"]:AddRightGroupbox('Configuration')

LeftGroupBox:AddToggle('', {
    Text = 'Auto Parry',
    Default = false,
    Callback = function(Value)
    end
})

LeftGroupBox:AddToggle('', {
    Text = 'AP Debbuger',
    Default = false,
    Callback = function(Value)
    end
})

LeftGroupBox:AddToggle('', {
    Text = 'Parry roll',
    Default = false,
    Callback = function(Value)
    end
})

LeftGroupBox:AddToggle('', {
    Text = 'Block Input',
    Default = false,
    Callback = function(Value)
    end
})

LeftGroupBox:AddToggle('', {
    Text = 'Dont Target Players',
    Default = false,
    Callback = function(Value)
    end
})

LeftGroupBox:AddToggle('', {
    Text = 'Check if Target',
    Default = false,
    Callback = function(Value)
    end
})
















































































-- Example of dynamically-updating watermark with common traits (fps and ping)
local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(('ZYG HUB [V3] | %s fps | %s ping'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);



Library:OnUnload(function()
    WatermarkConnection:Disconnect()

    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)

MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftAlt', NoUI = true, Text = 'Menu keybind' })

local LeftGroupBox = Tabs["UI Settings"]:AddLeftGroupbox('Toggles')

LeftGroupBox:AddToggle('Deepwoken Mod Join', {
    Text = 'Toggle Notification On Mod Join',
    Default = true,
    Tooltip = 'Notification On mod join', 

    Callback = function(Value)-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GroupId = 5212858 -- Replace with the group ID

-- Setup RemoteEvent
local RemoteEvent = Instance.new("RemoteEvent")
RemoteEvent.Name = "PlayerGroupEvent"
RemoteEvent.Parent = ReplicatedStorage

-- Function to create a message GUI
local function createMessage(player, text)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "GroupNotification"
    screenGui.Parent = player:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0.3, 0, 0.1, 0)
    frame.Position = UDim2.new(0.35, 0, 0.8, 0)
    frame.BackgroundColor3 = Color3.new(0, 0, 0)
    frame.BackgroundTransparency = 0.5
    frame.Parent = screenGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = text
    label.TextColor3 = Color3.new(1, 1, 1)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSans
    label.TextScaled = true
    label.Parent = frame

    -- Auto-remove GUI after 5 seconds
    task.delay(5, function()
        screenGui:Destroy()
    end)
end

-- Player added event
Players.PlayerAdded:Connect(function(player)
    player:GetPropertyChangedSignal("UserId"):Wait()

    task.defer(function()
        local success, role = pcall(function()
            return player:GetRoleInGroup(GroupId)
        end)
        
        if success and role ~= "Guest" then
            local joinTime = os.date("%X")
            RemoteEvent:FireAllClients(player.Name, role, joinTime, "join")
        end
    end)
end)

-- Player removed event
Players.PlayerRemoving:Connect(function(player)
    local success, role = pcall(function()
        return player:GetRoleInGroup(GroupId)
    end)

    if success and role ~= "Guest" then
        local leaveTime = os.date("%X")
        RemoteEvent:FireAllClients(player.Name, role, leaveTime, "leave")
    end
end)

-- Client-Side GUI Handling
RemoteEvent.OnClientEvent:Connect(function(playerName, role, time, eventType)
    local localPlayer = Players.LocalPlayer
    if localPlayer then
        if eventType == "join" then
            createMessage(localPlayer, playerName .. " (" .. role .. ") joined at " .. time)
        elseif eventType == "leave" then
            createMessage(localPlayer, playerName .. " (" .. role .. ") left at " .. time)
        end
    end
end)
    end
})







LeftGroupBox:AddToggle('Keybinds Toggle', {
    Text = 'Toggle Keybinds Menu',
    Default = false, -- Default value (true / false)
    Tooltip = 'Turns keybind menu on and off', 

    Callback = function(Value)
toggleState = toggleState or false

local function toggle()
    toggleState = not toggleState
    Library.KeybindFrame.Visible = toggleState 
end

toggle()
    end
})







Library.ToggleKeybind = Options.MenuKeybind

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('ZYG HUB [V3]')
SaveManager:SetFolder('ZYG HUB [V3]/Script Settings')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
